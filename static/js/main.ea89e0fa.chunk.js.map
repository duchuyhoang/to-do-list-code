{"version":3,"sources":["components/TodoForm.tsx","components/TodoList.tsx","components/Footer.tsx","hooks/useLocalStorage.tsx","components/Todo.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["React","memo","props","addTodo","checkAll","inputRef","useRef","useEffect","current","focus","className","type","id","htmlFor","onClick","ref","onKeyPress","e","key","value","target","trim","TodoList","list","setEditingId","editingId","deleteItem","editById","tickABox","map","todoItem","defaultValue","description","autoFocus","onBlur","currentTarget","checked","isCompleted","onChange","console","log","size","Footer","filterStatus","setFilterStatus","itemLeft","useLocalStorage","useState","keyLocal","local","localStorage","getItem","JSON","parse","arr","setItem","stringify","Todo","editId","setEditId","isCheckAll","setIsCheckAll","getLocalData","updateLocalData","setList","useCallback","Date","getTime","filterList","status","filter","todo","prev","text","itemIndex","findIndex","Number","isInteger","a","splice","item","length","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ea89e0fa.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport \"../styles/TodoForm.css\";\r\n\r\ninterface IFormProp {\r\n  addTodo: (description: string) => void;\r\n  checkAll: () => void;\r\n}\r\nexport default React.memo(function TodoForm(props: IFormProp) {\r\n  const { addTodo, checkAll } = props;\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current?.focus();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"d-flex form-container align-center\">\r\n      <input type=\"checkbox\" id=\"checkAll\" />\r\n      <label htmlFor=\"checkAll\" className=\"checkAll\" onClick={checkAll}></label>\r\n      <input\r\n        className=\"input-field\"\r\n        ref={inputRef}\r\n        onKeyPress={(e) => {\r\n          if (e.key === \"Enter\") {\r\n            let value = (e.target as HTMLInputElement).value.trim();\r\n            if (value !== \"\") addTodo(value);\r\n\r\n            if (inputRef.current) inputRef.current.value = \"\";\r\n          }\r\n        }}\r\n      />\r\n      <button\r\n        className=\"input-button\"\r\n        onClick={(e) => {\r\n          if (inputRef.current) {\r\n            let value = inputRef.current.value.trim();\r\n            if (value !== \"\") addTodo(value);\r\n            if (inputRef.current) inputRef.current.value = \"\";\r\n          }\r\n        }}\r\n      >\r\n        Add\r\n      </button>\r\n    </div>\r\n  );\r\n});\r\n","import React, { FC } from \"react\";\r\nimport \"../styles/TodoList.css\";\r\nimport { AiFillDelete } from \"react-icons/ai\";\r\nimport { TiEdit } from \"react-icons/ti\";\r\nexport interface ITodoItem {\r\n  id: number;\r\n  description: string;\r\n  isCompleted: boolean;\r\n}\r\n\r\ninterface ITodoListProps {\r\n  list: ITodoItem[];\r\n  editingId: number;\r\n  setEditingId: (id: number) => void;\r\n  editById: (id: number, text: string) => void;\r\n  deleteItem: (id: number) => void;\r\n  tickABox: (id: number, status: boolean) => void;\r\n}\r\n\r\nexport const TodoList: FC<ITodoListProps> = ({\r\n  list,\r\n  setEditingId,\r\n  editingId,\r\n  deleteItem,\r\n  editById,\r\n  tickABox,\r\n}) => {\r\n  return (\r\n    <section className=\"todo-list-container\">\r\n      {list.map((todoItem: ITodoItem) =>\r\n        editingId === todoItem.id ? (\r\n          <input\r\n            type=\"text\"\r\n            className=\"todo-item\"\r\n            key={todoItem.id}\r\n            defaultValue={todoItem.description}\r\n            autoFocus\r\n            onBlur={(e) => {\r\n              const value = (e.currentTarget as HTMLInputElement).value;\r\n              editById(todoItem.id, value);\r\n              setEditingId(-1);\r\n            }}\r\n            onKeyPress={(e) => {\r\n              if (e.key === \"Enter\") {\r\n                const value = (e.currentTarget as HTMLInputElement).value;\r\n                editById(todoItem.id, value);\r\n                setEditingId(-1);\r\n              }\r\n            }}\r\n          />\r\n        ) : (\r\n          <div className=\"todo-item\" key={`edit-${todoItem.id}`}>\r\n            <div className=\"tick-container d-flex align-center\">\r\n              <input\r\n                type=\"checkbox\"\r\n                id={`\"checkbox-\"${todoItem.id}`}\r\n                checked={todoItem.isCompleted}\r\n                onChange={() => {\r\n                  tickABox(todoItem.id, !todoItem.isCompleted);\r\n                  console.log(\"changed\");\r\n                }}\r\n              />\r\n              <label\r\n                htmlFor={`\"checkbox-\"${todoItem.id}`}\r\n                className=\"label-checkbox\"\r\n              ></label>\r\n            </div>\r\n            <div\r\n              className={`item-description ${\r\n                todoItem.isCompleted ? \"item-complete\" : \"\"\r\n              }`}\r\n            >\r\n              {todoItem.description}\r\n            </div>\r\n            <div className=\"d-flex align-center icon-container\">\r\n              <TiEdit size=\"25\" onClick={() => setEditingId(todoItem.id)} />\r\n              <AiFillDelete\r\n                size=\"25\"\r\n                onClick={(e) => {\r\n                  deleteItem(todoItem.id);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        )\r\n      )}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default TodoList;\r\n","import React, { FC } from \"react\";\r\nimport \"../styles/Footer.css\";\r\n\r\ninterface IFooterProps {\r\n  filterStatus: string;\r\n  setFilterStatus: (status: string) => void;\r\n  itemLeft: number;\r\n}\r\n\r\nconst Footer: FC<IFooterProps> = ({\r\n  filterStatus,\r\n  setFilterStatus,\r\n  itemLeft,\r\n}) => {\r\n  return (\r\n    <div className=\"d-flex space-between mt-10\">\r\n      <div className=\"item-left d-flex align-center\">{itemLeft} items left</div>\r\n      <div className=\"d-flex space-between filter-button-container\">\r\n        <button\r\n          className={`filter-button d-flex align-center\r\n          ${filterStatus === \"All\" && \"button-activate\"} `}\r\n          onClick={() => {\r\n            setFilterStatus(\"All\");\r\n          }}\r\n        >\r\n          All\r\n        </button>\r\n        <button\r\n          className={`filter-button d-flex align-center\r\n        ${filterStatus === \"Activated\" && \"button-activate\"}\r\n        `}\r\n          onClick={() => {\r\n            setFilterStatus(\"Activated\");\r\n          }}\r\n        >\r\n          Activated\r\n        </button>\r\n        <button\r\n          className={`filter-button d-flex align-center\r\n          ${filterStatus === \"Completed\" && \"button-activate\"} `}\r\n          onClick={() => {\r\n            setFilterStatus(\"Completed\");\r\n          }}\r\n        >\r\n          Completed\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Footer;\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst useLocalStorage = (key: string): any[] => {\r\n  const [keyLocal, setKey] = useState<string>(key);\r\n  useEffect(() => {}, []);\r\n  const getData = () => {\r\n    const local = localStorage.getItem(keyLocal);\r\n    if (typeof local === \"string\") {\r\n      return JSON.parse(local);\r\n    } else return [];\r\n  };\r\n  const updateData = (arr: any[]) => {\r\n    localStorage.setItem(keyLocal, JSON.stringify(arr));\r\n  };\r\n\r\n  return [getData, updateData];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import React, { useState, useCallback, useEffect } from \"react\";\r\nimport TodoForm from \"./TodoForm\";\r\nimport \"../styles/Todo.css\";\r\nimport TodoList, { ITodoItem } from \"./TodoList\";\r\nimport Footer from \"./Footer\";\r\nimport useLocalStorage from \"../hooks/useLocalStorage\";\r\n\r\nexport default function Todo() {\r\n  const [editId, setEditId] = useState<number>(-1);\r\n  const [filterStatus, setFilterStatus] = useState<string>(\"All\");\r\n  const [isCheckAll, setIsCheckAll] = useState<boolean>(false);\r\n  const [getLocalData, updateLocalData] = useLocalStorage(\"todo\");\r\n  const [list, setList] = useState<ITodoItem[]>([]);\r\n\r\n  //   Use callback to remmerber this func because everytime you update state this function is a new one so when it pass to TodoForm Component is will make it re-render.\r\n\r\n  useEffect(() => {\r\n    updateLocalData(list);\r\n  }, [list]);\r\n\r\n  useEffect(() => {\r\n    setList(getLocalData());\r\n  }, []);\r\n  const addTodo = useCallback(\r\n    (description: string) => {\r\n      setList([\r\n        ...list,\r\n        {\r\n          id: new Date().getTime(),\r\n          description: description,\r\n          isCompleted: false,\r\n        },\r\n      ]);\r\n    },\r\n    [list]\r\n  );\r\n\r\n  const setEditingId = (id: number) => {\r\n    setEditId(id);\r\n  };\r\n\r\n  const deleteById = (id: number) => {\r\n    setList(list.filter((item) => item.id !== id));\r\n  };\r\n\r\n  const editById = (id: number, text: string) => {\r\n    const itemIndex = list.findIndex((todo) => todo.id === id);\r\n    if (Number.isInteger(itemIndex)) {\r\n      let a = [...list];\r\n\r\n      a.splice(itemIndex, 1, {\r\n        id: list[itemIndex].id,\r\n        description: text,\r\n        isCompleted: list[itemIndex].isCompleted,\r\n      });\r\n      setList(a);\r\n    }\r\n  };\r\n\r\n  const tickBox = (id: number, status: boolean) => {\r\n    const itemIndex = list.findIndex((todo) => todo.id === id);\r\n\r\n    if (Number.isInteger(itemIndex)) {\r\n      let a = [...list];\r\n\r\n      a.splice(itemIndex, 1, { ...list[itemIndex], isCompleted: status });\r\n\r\n      setList(a);\r\n    }\r\n  };\r\n\r\n  const checkAll = () => {\r\n    if (!isCheckAll)\r\n      setList(\r\n        list.map((todo) => {\r\n          return {\r\n            ...todo,\r\n            isCompleted: true,\r\n          };\r\n        })\r\n      );\r\n    else {\r\n      setList(\r\n        list.map((todo) => {\r\n          return {\r\n            ...todo,\r\n            isCompleted: false,\r\n          };\r\n        })\r\n      );\r\n    }\r\n    setIsCheckAll((prev) => !prev);\r\n  };\r\n\r\n  const filterList = (list: ITodoItem[], status: string) => {\r\n    switch (status) {\r\n      case \"All\":\r\n        return list;\r\n\r\n      case \"Activated\":\r\n        return list.filter((todo) => todo.isCompleted === false);\r\n\r\n      case \"Completed\":\r\n        return list.filter((todo) => todo.isCompleted === true);\r\n      default:\r\n        return list;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section className=\"todo-container\">\r\n      <h1>What's is the Plan for Today?</h1>\r\n\r\n      <TodoForm addTodo={addTodo} checkAll={checkAll} />\r\n\r\n      <TodoList\r\n        list={filterList(list, filterStatus)}\r\n        editingId={editId}\r\n        setEditingId={setEditingId}\r\n        editById={editById}\r\n        deleteItem={deleteById}\r\n        tickABox={tickBox}\r\n      />\r\n      <Footer\r\n        filterStatus={filterStatus}\r\n        setFilterStatus={setFilterStatus}\r\n        itemLeft={filterList(list, \"Activated\").length}\r\n      />\r\n    </section>\r\n  );\r\n}\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport Todo from \"./components/Todo\";\nimport \"./App.css\";\nfunction App() {\n  return (\n    <Todo />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}